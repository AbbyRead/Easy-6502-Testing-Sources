; To do:
; * Snake length increasing slows down the game.
;    - Make spinWheels amount dependent on it as a band-aid
; * Apples can spawn on snake.  Cosmetic nuisance mostly.
; * Apples can be white.  Probably shouldn't confuse with snake
; * Snake length probably gets screwy at around 4 full lines
;    - Consider defining body segments outside of zero page
; * Write out high score length somehow on death

;  ___           _        __ ___  __ ___
; / __|_ _  __ _| |_____ / /| __|/  \_  )
; \__ \ ' \/ _` | / / -_) _ \__ \ () / /
; |___/_||_\__,_|_\_\___\___/___/\__/___|

; Change direction: E S D F

define appleL         $00
define appleH         $01
define appleColor     $02 ; pixel value
define snakeDirection $04 ; logic, not address
define snakeLength    $05 ; logic, not address

define snakeHeadL     $10
define snakeHeadH     $11
define bodySegmentsL  $12
define bodySegmentsH  $13
; The rest of the zero page (except the sys bytes)
;  could be filled up with body part locations.

; Directions (each using a separate bit)
define movingUp      1
define movingRight   2
define movingDown    4
define movingLeft    8

; relative ASCII values of keys controlling the snake
define ASCII_w      $6f ; o hw: e
define ASCII_a      $69 ; i hw: s
define ASCII_s      $65 ; e hw: d
define ASCII_d      $61 ; a hw: f
; Since terminals--and by extension this emulator,
;  I guess--cannot directly see keypresses, we have
;  to take values based on the virtual key input.
; I have a weird keyboard layout (Engram 2C), so
;  a bunch of the confusing replacement comes from
;  that.  The rest is because I like the home row.

; System variables
define sysRandom    $fe
define sysLastKey   $ff
; These are built into the emulator.  You can manually
;  reset sysLastKey though, which I do to achieve a
;  clean restart each time.

start:
  jsr init
  jsr loop

init:
  jsr initSnake
  jsr generateAppleData
  rts


initSnake:
  lda #movingRight  ;start direction
  sta snakeDirection
  sta sysLastKey

  lda #4  ;start length (2 segments)
  sta snakeLength
  
  lda #$11
  sta snakeHeadL
  
  lda #$10
  sta bodySegmentsL
  
  lda #$0f
  sta $14 ; body segment 2's low address byte
  
  lda #$04 ; head and body segments' high byte
  sta snakeHeadH
  sta bodySegmentsH
  sta $15
  rts


generateAppleData:
  lda sysRandom	; low byte may span the full range
  sta appleL
  lda sysRandom	; $00-FF random value
  and #$03	; masked with 0000_0011 makes $00-03
  clc
  adc #2	; possible values now $02-05
  sta appleH
  jsr getColor
  sta appleColor
  rts

getColor:
  lda sysRandom
  and #$0f	; mask out the high nibble
  cmp #$00	; $00 is black
  beq skipColor
  cmp #$0b	; $0b is dark grey
  beq skipColor
skipped:	; falls to here regardless
  rts

skipColor:
  clc
  adc #1
  jmp skipped
; Could have just done rts, but don't want to muddle

loop:
  jsr readKeys
  jsr checkCollision
  jsr updateSnake
  jsr drawApple
  jsr drawSnake
  jsr spinWheels
  jmp loop

readKeys:
  lda sysLastKey
  cmp #ASCII_w
  beq upKey
  cmp #ASCII_d
  beq rightKey
  cmp #ASCII_s
  beq downKey
  cmp #ASCII_a
  beq leftKey
  rts

upKey:
  lda #movingDown
  bit snakeDirection
  bne illegalMove
  lda #movingUp
  sta snakeDirection
  rts

rightKey:
  lda #movingLeft
  bit snakeDirection
  bne illegalMove
  lda #movingRight
  sta snakeDirection
  rts

downKey:
  lda #movingUp
  bit snakeDirection
  bne illegalMove
  lda #movingDown
  sta snakeDirection
  rts

leftKey:
  lda #movingRight
  bit snakeDirection
  bne illegalMove
  lda #movingLeft
  sta snakeDirection
  rts

illegalMove:
  rts

checkCollision:
  jsr checkAppleCollision
  jsr checkSnakeCollision
  rts

checkAppleCollision:
  lda appleL
  cmp snakeHeadL
  bne doneCheckingAppleCollision
  lda appleH
  cmp snakeHeadH
  bne doneCheckingAppleCollision

  ;eat apple
  inc snakeLength
  inc snakeLength ;increase length
  jsr generateAppleData
doneCheckingAppleCollision:
  rts

checkSnakeCollision:
  ldx #2 ;start with second segment
snakeCollisionLoop:
  lda snakeHeadL,x
  cmp snakeHeadL
  bne continueCollisionLoop

maybeCollided:
  lda snakeHeadH,x
  cmp snakeHeadH
  beq didCollide

continueCollisionLoop:
  inx
  inx
  cpx snakeLength          
 ;got to last section with no collision
  beq didntCollide
  jmp snakeCollisionLoop

didCollide:
  jmp gameOver
didntCollide:
  rts

updateSnake:
  ldx snakeLength
  dex
  txa
updateloop:
  lda snakeHeadL,x
  sta bodySegmentsL,x
  dex
  bpl updateloop

  lda snakeDirection
  lsr
  bcs up
  lsr
  bcs right
  lsr
  bcs down
  lsr
  bcs left
up:
  lda snakeHeadL
  sec
  sbc #$20
  sta snakeHeadL
  bcc upup
  rts
upup:
  dec snakeHeadH
  lda #$1
  cmp snakeHeadH
  beq collision
  rts
right:
  inc snakeHeadL
  lda #$1f
  bit snakeHeadL
  beq collision
  rts
down:
  lda snakeHeadL
  clc
  adc #$20
  sta snakeHeadL
  bcs downdown
  rts
downdown:
  inc snakeHeadH
  lda #$6
  cmp snakeHeadH
  beq collision
  rts
left:
  dec snakeHeadL
  lda snakeHeadL
  and #$1f
  cmp #$1f
  beq collision
  rts
collision:
  jmp gameOver


drawApple:
  ldy #0
  lda appleColor
  sta (appleL),y
  rts

drawSnake:
  ldx snakeLength
  lda #0
  sta (snakeHeadL,x) ; erase end of tail
  ldx #0
  lda #1
  sta (snakeHeadL,x) ; paint head
  rts


spinWheels:
  ldx #$40
spinloop:
  nop
  nop
  dex
  bne spinloop
  rts


gameOver:
  jsr clearScreen
  jsr start

clearScreen:
  ldx #$00
  ldy #$00

clsLoop200s:
  tya 		;refresh a with 00
  sta $0200,x
  inx
  txa
  bne clsLoop200s

clsLoop300s:
  tya 		;refresh a with 00
  sta $0300,x
  inx
  txa
  bne clsLoop300s

clsLoop400s:
  tya 		;refresh a with 00
  sta $0400,x
  inx
  txa
  bne clsLoop400s

clsLoop500s:
  tya 		;refresh a with 00
  sta $0500,x
  inx
  txa
  bne clsLoop500s

  jmp start
